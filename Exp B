#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// Node structure for doubly linked list
struct node {
    int data;
    struct node* next;
    struct node* prev;
};

// Global pointers for head and tail
struct node *head = NULL, *tail = NULL, *temp = NULL;

// Function to check if the linked list is empty
bool isempty() {
    return (head == NULL);
}

// Function to find the length of the linked list
int lengthofll() {
    int lengthvar = 0;
    temp = head;
    while (temp != NULL) {
        temp = temp->next;
        lengthvar++;
    }
    return lengthvar;
}

// Function to create and add a node to the doubly linked list
void createnode() {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;
    newnode->prev = NULL;

    int menu = 0;
    do {
        int choice;
        printf("Enter choice:\n1. Add to beginning\n2. Add to end\n3. Add to any position\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Add to beginning
                if (isempty()) {
                    head = newnode;
                    tail = newnode;
                } else {
                    newnode->next = head;
                    head->prev = newnode;
                    head = newnode;
                }
                break;

            case 2: // Add to end
                if (isempty()) {
                    head = newnode;
                    tail = newnode;
                } else {
                    tail->next = newnode;
                    newnode->prev = tail;
                    tail = newnode;
                }
                break;

            case 3: { // Add to any position
                int pos, i = 1;
                printf("Enter position: ");
                scanf("%d", &pos);

                if (pos > lengthofll() + 1 || pos < 1) {
                    printf("Invalid position.\n");
                } else if (pos == 1) {
                    newnode->next = head;
                    if (head != NULL) head->prev = newnode;
                    head = newnode;
                    if (tail == NULL) tail = newnode; // For an empty list
                } else {
                    temp = head;
                    while (i < pos - 1 && temp != NULL) {
                        temp = temp->next;
                        i++;
                    }
                    newnode->next = temp->next;
                    if (temp->next != NULL) temp->next->prev = newnode;
                    newnode->prev = temp;
                    temp->next = newnode;
                    if (newnode->next == NULL) tail = newnode; // If it's the new tail
                }
                break;
            }

            default:
                printf("Invalid choice.\n");
        }

        // Exiting the menu after one operation
        menu = 1;

    } while (menu == 0);
}

// Function to delete a node from the doubly linked list
void deletenode() {
    int menu = 0;
    do {
        int choice;
        printf("Enter choice:\n1. Delete from beginning\n2. Delete from end\n3. Delete from any position\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Delete from beginning
                if (isempty()) {
                    printf("List is empty.\n");
                } else {
                    temp = head;
                    head = head->next;
                    if (head != NULL) head->prev = NULL;
                    else tail = NULL; // List becomes empty
                    free(temp);
                    printf("Node deleted from beginning.\n");
                }
                break;

            case 2: // Delete from end
                if (isempty()) {
                    printf("List is empty.\n");
                } else if (head == tail) { // If there's only one node
                    free(head);
                    head = tail = NULL;
                    printf("Node deleted from end (only node).\n");
                } else {
                    temp = tail;
                    tail = tail->prev;
                    tail->next = NULL;
                    free(temp);
                    printf("Node deleted from end.\n");
                }
                break;

            case 3: { // Delete from a specific position
                int pos, i = 1;
                printf("Enter position: ");
                scanf("%d", &pos);

                if (isempty()) {
                    printf("List is empty.\n");
                } else if (pos == 1) {
                    temp = head;
                    head = head->next;
                    if (head != NULL) head->prev = NULL;
                    else tail = NULL;
                    free(temp);
                    printf("Node deleted from position 1.\n");
                } else if (pos > lengthofll() || pos < 1) {
                    printf("Invalid position.\n");
                } else {
                    temp = head;
                    while (i < pos && temp != NULL) {
                        temp = temp->next;
                        i++;
                    }
                    if (temp->prev != NULL) temp->prev->next = temp->next;
                    if (temp->next != NULL) temp->next->prev = temp->prev;
                    if (temp == tail) tail = temp->prev; // If it's the tail
                    free(temp);
                    printf("Node deleted from position %d.\n", pos);
                }
                break;
            }

            default:
                printf("Invalid choice.\n");
        }

        // Exiting the menu after one operation
        menu = 1;

    } while (menu == 0);
}

// Function to display the linked list
void display() {
    temp = head;
    if (isempty()) {
        printf("List is empty.\n");
    } else {
        while (temp != NULL) {
            printf("%d <-> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main() {
    int choice;
    
    do {
        printf("\nMenu:\n");
        printf("1. Create and Add a Node\n");
        printf("2. Delete a Node\n");
        printf("3. Display List\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                createnode();
                break;
            case 2:
                deletenode();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 4);

    return 0;
}
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// Node structure
struct node {
    int data;
    struct node* next;
};

// Global pointers
struct node *head = NULL, *tail = NULL, *temp = NULL;

// Function to check if the linked list is empty
bool isempty() {
    return (head == NULL);
}

// Function to update the tail pointer to the last node
void updatetail() {
    if (isempty()) {
        tail = NULL;
        return;
    } else {
        temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        tail = temp;
    }
}

// Function to find the length of the linked list
int lengthofll() {
    int lengthvar = 0;
    temp = head;
    while (temp != NULL) {
        temp = temp->next;
        lengthvar++;
    }
    return lengthvar;
}

// Function to create and add a node to the list
void createnode() {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;

    int menu = 0;
    do {
        int choice;
        printf("Enter choice:\n1. Add to beginning\n2. Add to end\n3. Add to any position\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Add to beginning
                if (isempty()) {
                    head = newnode;
                    tail = newnode;
                } else {
                    newnode->next = head;
                    head = newnode;
                }
                break;

            case 2: // Add to end
                if (isempty()) {
                    head = newnode;
                    tail = newnode;
                } else {
                    tail->next = newnode;
                    tail = newnode;
                }
                break;

            case 3: { // Add to any position
                int pos, i = 1;
                printf("Enter position: ");
                scanf("%d", &pos);

                if (pos > lengthofll() + 1 || pos < 1) {
                    printf("Invalid position.\n");
                } else if (pos == 1) {
                    newnode->next = head;
                    head = newnode;
                } else {
                    temp = head;
                    while (i < pos - 1 && temp != NULL) {
                        temp = temp->next;
                        i++;
                    }
                    newnode->next = temp->next;
                    temp->next = newnode;
                }
                break;
            }

            default:
                printf("Invalid choice.\n");
        }

        // Updating tail after any addition
        updatetail();

        // Exiting the menu after one operation
        menu = 1;

    } while (menu == 0);
}

// Function to delete a node from the list
void deletenode() {
    int menu = 0;
    do {
        int choice;
        printf("Enter choice:\n1. Delete from beginning\n2. Delete from end\n3. Delete from any position\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Delete from beginning
                if (isempty()) {
                    printf("List is empty.\n");
                } else {
                    temp = head;
                    head = head->next;
                    free(temp);
                    updatetail();
                    printf("Node deleted from beginning.\n");
                }
                break;

            case 2: // Delete from end
                if (isempty()) {
                    printf("List is empty.\n");
                } else if (head == tail) { // If there's only one node
                    free(head);
                    head = tail = NULL;
                    printf("Node deleted from end (only node).\n");
                } else {
                    temp = head;
                    struct node* prev = NULL;
                    while (temp->next != NULL) {
                        prev = temp;
                        temp = temp->next;
                    }
                    prev->next = NULL;
                    free(temp);
                    updatetail();
                    printf("Node deleted from end.\n");
                }
                break;

            case 3: { // Delete from a specific position
                int pos, i = 1;
                printf("Enter position: ");
                scanf("%d", &pos);

                if (isempty()) {
                    printf("List is empty.\n");
                } else if (pos == 1) {
                    temp = head;
                    head = head->next;
                    free(temp);
                    updatetail();
                    printf("Node deleted from position 1.\n");
                } else if (pos > lengthofll() || pos < 1) {
                    printf("Invalid position.\n");
                } else {
                    temp = head;
                    struct node* prev = NULL;
                    while (i < pos && temp != NULL) {
                        prev = temp;
                        temp = temp->next;
                        i++;
                    }
                    prev->next = temp->next;
                    free(temp);
                    updatetail();
                    printf("Node deleted from position %d.\n", pos);
                }
                break;
            }

            default:
                printf("Invalid choice.\n");
        }

        // Exiting the menu after one operation
        menu = 1;

    } while (menu == 0);
}

// Function to display the linked list
void display() {
    temp = head;
    if (isempty()) {
        printf("List is empty.\n");
    } else {
        while (temp != NULL) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main() {
    int choice;
    
    do {
        printf("\nMenu:\n");
        printf("1. Create and Add a Node\n");
        printf("2. Delete a Node\n");
        printf("3. Display List\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                createnode();
                break;
            case 2:
                deletenode();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 4);

    return 0;
}
