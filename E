#include <iostream>
#include <string>
using namespace std;

#define MAX 1000

class Stack {
    int top;
    char arr[MAX];  // Array to simulate stack

public:
    Stack() { top = -1; }  // Constructor initializing stack top as -1

    // Function to push an element into the stack
    bool push(char c) {
        if (top >= (MAX - 1)) {
            cout << "Stack Overflow\n";
            return false;
        } else {
            arr[++top] = c;
            return true;
        }
    }

    // Function to pop an element from the stack
    char pop() {
        if (top < 0) {
            cout << "Stack Underflow\n";
            return 0;
        } else {
            char c = arr[top--];
            return c;
        }
    }

    // Function to check if stack is empty
    bool isEmpty() {
        return (top < 0);
    }
};

// Function to check if the input parentheses are balanced
bool areParenthesesBalanced(string expr) {
    Stack stack;

    for (int i = 0; i < expr.length(); i++) {
        char c = expr[i];

        // If opening bracket, push to stack
        if (c == '(' || c == '{' || c == '[') {
            stack.push(c);
        }

        // If closing bracket, pop from stack and check
        if (c == ')' || c == '}' || c == ']') {
            if (stack.isEmpty()) {
                return false;  // Stack is empty, so unbalanced
            }
            char poppedChar = stack.pop();
            // Check for matching pair
            if ((c == ')' && poppedChar != '(') ||
                (c == '}' && poppedChar != '{') ||
                (c == ']' && poppedChar != '[')) {
                return false;
            }
        }
    }

    // If stack is not empty, then parentheses are unbalanced
    return stack.isEmpty();
}

int main() {
    string expr;
    cout << "Enter an expression with parentheses: ";
    cin >> expr;

    if (areParenthesesBalanced(expr)) {
        cout << "Balanced Parentheses\n";
    } else {
        cout << "Unbalanced Parentheses\n";
    }

    return 0;
}
